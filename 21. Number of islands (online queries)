//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;


// } Driver Code Ends
//User function Template for Java

class Solution {
    
    public List<Integer> numOfIslands(int rows, int cols, int[][] operators) {
        //Your code here
        List<Integer> ans=new ArrayList<>();
        
        DisjointSet ds=new DisjointSet(rows*cols);
        
        int queries=operators.length;
        
        
        int[][] vis=new int[rows][cols];
        for(int[] row:vis)
        Arrays.fill(row,0);
        
        int[] dr={0,1,0,-1};
        int[] dc={1,0,-1,0};
        
        int count=0;
        
        
        for(int i=0;i<queries;i++)
        {
            int row=operators[i][0];
            int col=operators[i][1];
            
            if(vis[row][col]==1)
            {
                ans.add(count);
                continue;
            }
            vis[row][col]=1;
            count++;
            for(int k=0;k<4;k++)
            {
                int newr=row+dr[k];
                int newc=col+dc[k];
                if(newr>=0&&newr<rows&&newc>=0&&newc<cols)
                {
                    // if current node and neighbour node has same ulitmate parent do count-- 
                    if(vis[newr][newc]==1)
                    {
                        int curNode=row*cols+col;
                        int adjNode=newr*cols+newc;
                        if(ds.findParent(curNode)!=ds.findParent(adjNode))
                         {
                            count--;
                            ds.unionByRank(curNode,adjNode);
                         }
                    }
                }
                                
                
            }
            ans.add(count);
            
        }
        
        return ans;
    }
    
}
class DisjointSet
{
    List<Integer> parent=new ArrayList<>();
    List<Integer> rank=new ArrayList<>();
    public DisjointSet(int n)
    {
        for(int i=0;i<n;i++)
        {
            rank.add(0);
            parent.add(i);
        }
    }
    
    public int findParent(int node)
    {
        if(node==parent.get(node))return node;
        parent.set(node,findParent(parent.get(node)));
        return parent.get(node);
    }
    
    public void unionByRank(int u,int v)
    {
        int ulp_u=findParent(u);
        int ulp_v=findParent(v);
        if(ulp_u==ulp_v)return;
        if(rank.get(ulp_u)<rank.get(ulp_v))parent.set(ulp_u,ulp_v);
        else if(rank.get(ulp_u)>rank.get(ulp_v))parent.set(ulp_v,ulp_u);
        else
        {
            parent.set(ulp_u,ulp_v);
            rank.set(ulp_v,rank.get(ulp_v)+1);
        }
    }
    
    
    
}


//{ Driver Code Starts.

class GFG {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while (T-- > 0) {
            int n = sc.nextInt();
            int m = sc.nextInt();
            int  k= sc.nextInt();
            int[][] a = new int[k][2];
            for(int i=0;i<k;i++){
            
                a[i][0] = sc.nextInt();
                a[i][1] = sc.nextInt();
            }
            
            Solution obj = new Solution();
            List<Integer> ans = obj.numOfIslands(n,m,a);
           
            for(int i:ans){
                System.out.print(i+" ");
            }
            System.out.println();
        }
    }
}

// } Driver Code Ends
