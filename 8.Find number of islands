import java.util.*;
public class Solution 
{
    public static int getTotalIslands(int[][] mat) 
	{
        //Your code goes here
        int n=mat.length;
        int m=mat[0].length;
        boolean[][] vis=new boolean[n][m];
        for(boolean []row:vis)
        Arrays.fill(row,false);
        int count=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(!vis[i][j]&&mat[i][j]==1)
                {
                    count++;
                    bfs(i,j,mat,vis,n,m);
                }
            }
        }
        return count;
    }
    private static void bfs(int row,int col,int[][] mat,boolean[][] vis,int n,int m)
    {
        Queue<int[]> queue=new LinkedList<>();
        queue.add(new int[]{row,col});
        vis[row][col]=true;
        while(!queue.isEmpty())
        {
            int[] cell=queue.remove();
            for(int drow=-1;drow<=1;drow++)
            {
                for(int dcol=-1;dcol<=1;dcol++)
                {
                    int nrow=cell[0]+drow;
                    int ncol=cell[1]+dcol;
                    if(nrow>=0&&nrow<n&&ncol>=0&&ncol<m&&!vis[nrow][ncol]&&mat[nrow][ncol]==1)
                    {
                        vis[nrow][ncol]=true;
                        queue.add(new int[]{nrow,ncol});
                    }
                }
            }
        }
    }
}
