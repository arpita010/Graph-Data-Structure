//{ Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while (T-- > 0) {
            int n = sc.nextInt();
            int edge=sc.nextInt();
            int[][] adj = new int[edge][3];
            for(int i=0;i<edge;i++){
                adj[i][0]=sc.nextInt();
                adj[i][1]=sc.nextInt();
                adj[i][2]=sc.nextInt();
            }
            int src=sc.nextInt();
            int dst=sc.nextInt();
            int k=sc.nextInt();
            Solution obj = new Solution();
            int res = obj.CheapestFLight(n,adj,src,dst,k);
            System.out.println(res);
        }
    }
}

// } Driver Code Ends


class Solution {
    
    public int CheapestFLight(int n,int flights[][],int src,int dst,int k) {
        // Code here
        
        // graph adjacency list
        ArrayList<ArrayList<int[]>> adj=new ArrayList<>();
        for(int i=0;i<n;i++)adj.add(new ArrayList<>());
        for(int i=0;i<flights.length;i++)
        {
            adj.get(flights[i][0]).add(new int[]{flights[i][1],flights[i][2]});
        }
        
        
        int[] cost=new int[n];
        Arrays.fill(cost,Integer.MAX_VALUE);
        Queue<int[]> queue=new LinkedList<>();
        queue.add(new int[]{0,0,src});
        cost[src]=0;
        
        
        //stops,cost,node
        while(!queue.isEmpty())
        {
            int[] cur=queue.remove();
            int stops=cur[0];
            int curcost=cur[1];
            int node=cur[2];
            if(stops>k)continue;
            for(int[] it:adj.get(node))
            {
                int adjNode=it[0];
                int travelcost=it[1];
                if(curcost+travelcost<cost[adjNode]&&stops<=k)
                {
                    cost[adjNode]=curcost+travelcost;
                    queue.add(new int[]{stops+1,cost[adjNode],adjNode});
                }
            }
        }
        
        return cost[dst]==Integer.MAX_VALUE?-1:cost[dst];
        
    }
}
