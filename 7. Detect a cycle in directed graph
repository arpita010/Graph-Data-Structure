import java.util.ArrayList;
import java.util.*;
public class Solution {
  public static boolean detectCycleInDirectedGraph(int n, ArrayList < ArrayList < Integer >> edges) {
    // Write your code here.
    ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
    for(int i=0;i<n+1;i++)
    adj.add(new ArrayList<Integer>());
    for(ArrayList<Integer> edge:edges)
    {
      adj.get(edge.get(0)).add(edge.get(1));
    }
    boolean []vis=new boolean[n+1];
    boolean []pathvis=new boolean[n+1];
    Arrays.fill(vis,false);
    Arrays.fill(pathvis,false);
    for(int i=1;i<=n;i++)
    {
      if(!vis[i])
      {
        if(dfs(i,adj,vis,pathvis))return true;
      }
    }
    return false;
  }
  private static boolean dfs(int src,ArrayList<ArrayList<Integer>> adj,boolean[] vis,boolean[] pathvis)
  {
    vis[src]=true;
    pathvis[src]=true;
    for(int it:adj.get(src))
    {
      if(!vis[it])
      {
        if(dfs(it,adj,vis,pathvis))return true;
      }else if(pathvis[it])return true;
    }
    pathvis[src]=false;
    return false;
  }
}
