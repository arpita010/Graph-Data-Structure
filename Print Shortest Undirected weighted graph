//{ Driver Code Starts
// Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;
@SuppressWarnings("unchecked") class GFG {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while (T-- > 0) {
            int n = sc.nextInt();
            int m = sc.nextInt();
            int edges[][] = new int[m][3];
            for (int i = 0; i < m; i++) {
                edges[i][0] = sc.nextInt();
                edges[i][1] = sc.nextInt();
                edges[i][2] = sc.nextInt();
            }
            Solution obj = new Solution();
            List<Integer> ans = obj.shortestPath(n, m, edges);
            for (int e : ans) {
                System.out.print(e + " ");
            }
            System.out.println();
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution {
    public static List<Integer> shortestPath(int n, int m, int edges[][]) {
        // code here
        int[] parent=new int[n+1];
        int[] dist=new int[n+1];
        Arrays.fill(dist,Integer.MAX_VALUE);
        for(int i=0;i<=n;i++)
        parent[i]=i;
        
        ArrayList<ArrayList<int[]>> adj=new ArrayList<>();
        for(int i=0;i<=n;i++)adj.add(new ArrayList<>());
        
        for(int i=0;i<m;i++)
        {
            adj.get(edges[i][0]).add(new int[]{edges[i][1],edges[i][2]});
            adj.get(edges[i][1]).add(new int[]{edges[i][0],edges[i][2]});
        }
        dist[1]=0;
        PriorityQueue<int[]> queue=new PriorityQueue<>((x,y)->x[0]-y[0]);
        queue.add(new int[]{0,1});
        while(!queue.isEmpty())
        {
            int[] cur=queue.remove();
            int node=cur[1];
            int dis=cur[0];
            for(int[] it:adj.get(node))
            {
                int v=it[0];
                int wt=it[1];
                if(dis+wt<dist[v])
                {
                    dist[v]=dis+wt;
                    queue.add(new int[]{dist[v],v});
                    parent[v]=node;
                }
            }
        }
        List<Integer> result=new ArrayList<>();
        
        if(dist[n]==Integer.MAX_VALUE)
        {
            result.add(-1);
            return result;
        }
        // result.add(n);
        int node=n;
        while(node!=parent[node])
        {
            result.add(node);
            node=parent[node];
        }
        result.add(1);
        Collections.reverse(result);
        return result;
    }
}
