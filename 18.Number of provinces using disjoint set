//{ Driver Code Starts
import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            int V = Integer.parseInt(read.readLine());
            
            ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
            
            for(int i=0; i<V; i++)
            {
                String S[] = read.readLine().split(" ");
                ArrayList<Integer> temp = new ArrayList<>();
                for(int j=0; j<V; j++)
                    temp.add(Integer.parseInt(S[j]));
                adj.add(temp);
            }

            Solution ob = new Solution();
            System.out.println(ob.numProvinces(adj,V));
        }
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution {
    static int numProvinces(ArrayList<ArrayList<Integer>> adj, int V) {
        
        DisjointSet ds=new DisjointSet(V);
        for(int u=0;u<V;u++)
        {
            for(int v=0;v<V;v++)
            {
                if(adj.get(u).get(v)==1)
                {
                    ds.unionByRank(u+1,v+1);
                }
            }
        }
        
        List<Integer> parent=ds.parent;
        // System.out.println(parent);
        // Set<Integer> set=new HashSet(parent);
        int count=0;
        for(int i=1;i<parent.size();i++)
        if(i==parent.get(i))count++;
        return count;
    }
}

class DisjointSet
{
    List<Integer> rank=new ArrayList<>();
    List<Integer> parent=new ArrayList<>();
    public DisjointSet(int size)
    {
        for(int i=0;i<=size;i++)
        {
            rank.add(0);
            parent.add(i);
        }
    }
    
    public int findParent(int node)
    {
        if(node==parent.get(node))return node;
        parent.set(node,findParent(parent.get(node)));
        return parent.get(node);
    }
    public void unionByRank(int u,int v)
    {
        int ulp_u=findParent(u);
        int ulp_v=findParent(v);
        if(ulp_u==ulp_v)return;
        if(rank.get(ulp_u)<rank.get(ulp_v))
        parent.set(ulp_u,ulp_v);
        else if(rank.get(ulp_u)>rank.get(ulp_v))
        parent.set(ulp_v,ulp_u);
        else
        {
            parent.set(ulp_u,ulp_v);
            rank.set(ulp_v,rank.get(ulp_v)+1);
        }
        
    }
    
    
    
}
