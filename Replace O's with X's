//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0){
            String a[] = in.readLine().trim().split(" ");
            int n = Integer.parseInt(a[0]);
            int m = Integer.parseInt(a[1]);
            char mat[][] = new char[n][m];
            for(int i=0; i<n; i++)
            {
                String S[] = in.readLine().trim().split(" ");
                for(int j=0; j<m; j++)
                {
                    mat[i][j] = S[j].charAt(0);
                }
            }
            
            Solution ob = new Solution();
            char[][] ans = ob.fill(n, m, mat);
            for(int i = 0;i < n;i++) {
                for(int j = 0;j < m;j++) {
                    System.out.print(ans[i][j] + " ");
                }
                System.out.println();
            }
        }
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution{
    static char[][] fill(int n, int m, char a[][])
    {
        // code here
        
        //those zeroes that are touched by boundaries can never be changed into x
        boolean[][] vis=new boolean[n][m];
        for(boolean[] row:vis)
        Arrays.fill(row,false);
        
        // first row and last row
        for(int i=0;i<m;i++)
        {
            if(a[0][i]=='O'&&!vis[0][i])
            {
                bfs(0,i,vis,a);
            }
            if(a[n-1][i]=='O'&&!vis[n-1][i])
            bfs(n-1,i,vis,a);
        }
        
        // first & last column
        for(int i=0;i<n;i++)
        {
            if(a[i][0]=='O'&&!vis[i][0])
            bfs(i,0,vis,a);
            if(a[i][m-1]=='O'&&!vis[i][m-1])
            bfs(i,m-1,vis,a);
        }
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(a[i][j]=='O'&&!vis[i][j])
                a[i][j]='X';
            }
        }
        
        return a;
    }
    private static void bfs(int row,int col,boolean[][] vis,char[][] grid)
    {
        Queue<int[]> queue=new LinkedList<>();
        queue.add(new int[]{row,col});
        vis[row][col]=true;
        int n=grid.length;
        int m=grid[0].length;
        int []dr={0,1,0,-1};
        int[] dc={1,0,-1,0};
        while(!queue.isEmpty())
        {
            int[] cell=queue.remove();
            int r=cell[0];
            int c=cell[1];
            for(int i=0;i<4;i++)
            {
                int newr=r+dr[i];
                int newc=c+dc[i];
                if(newr>=0&&newr<n&&newc>=0&&newc<m&&grid[newr][newc]=='O'&&!vis[newr][newc])
                {
                    vis[newr][newc]=true;
                    queue.add(new int[]{newr,newc});
                }
            }
        }
    }
    
    
    
}
