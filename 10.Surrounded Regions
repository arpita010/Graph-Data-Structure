class Solution {
    public void solve(char[][] board) {
        int n=board.length;
        int m=board[0].length;
        boolean [][]vis=new boolean[n][m];
        for(boolean[] row:vis)
        Arrays.fill(row,false);
        // first and last row
        for(int i=0;i<m;i++)
        {
            if(!vis[0][i]&&board[0][i]=='O')
            {
                dfs(0,i,vis,board);
            }
            if(!vis[n-1][i]&&board[n-1][i]=='O')
            dfs(n-1,i,vis,board);
        }
        //first and last column
        for(int i=0;i<n;i++)
        {
            if(!vis[i][0]&&board[i][0]=='O')
            dfs(i,0,vis,board);
            if(!vis[i][m-1]&&board[i][m-1]=='O')
            dfs(i,m-1,vis,board);
        }
        for(int i=1;i<n-1;i++)
        {
            for(int j=1;j<m-1;j++)
            {
                if(board[i][j]=='O'&&!vis[i][j])
                board[i][j]='X';
            }
        }
        // System.out.println(vis[2][3]);
    }
    private void dfs(int row,int col,boolean[][] vis,char[][] board)
    {
        vis[row][col]=true;
        int []dr={0,-1,0,1};
        int []dc={1,0,-1,0};
        for(int i=0;i<4;i++)
        {
            int nr=row+dr[i];
            int nc=col+dc[i];
            if(nr>=0&&nr<board.length&&nc>=0&&nc<board[0].length&&!vis[nr][nc]&&board[nr][nc]=='O')
            dfs(nr,nc,vis,board);
        }
    }
}
