//{ Driver Code Starts
import java.util.*;
import java.io.*;
import java.lang.*;

class DriverClass
{
    public static void main(String args[]) throws IOException {

        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            String str[] = read.readLine().trim().split(" ");
            int V = Integer.parseInt(str[0]);
            int E = Integer.parseInt(str[1]);
    
            ArrayList<ArrayList<ArrayList<Integer>>> adj = new ArrayList<ArrayList<ArrayList<Integer>>>();
            for(int i=0;i<V;i++)
            {
                adj.add(new ArrayList<ArrayList<Integer>>());
            }
            
            int i=0;
            while (i++<E) {
                String S[] = read.readLine().trim().split(" ");
                int u = Integer.parseInt(S[0]);
                int v = Integer.parseInt(S[1]);
                int w = Integer.parseInt(S[2]);
                ArrayList<Integer> t1 = new ArrayList<Integer>();
                ArrayList<Integer> t2 = new ArrayList<Integer>();
                t1.add(v);
                t1.add(w);
                t2.add(u);
                t2.add(w);
                adj.get(u).add(t1);
                adj.get(v).add(t2);
            }
            
            int S = Integer.parseInt(read.readLine());
            
            Solution ob = new Solution();
            
            int[] ptr = ob.dijkstra(V, adj, S);
            
            for(i=0; i<V; i++)
                System.out.print(ptr[i] + " ");
            System.out.println();
        }
    }
}
// } Driver Code Ends


//User function Template for Java


class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        // Write your code here
        int[] dist=new int[V];
        Arrays.fill(dist,Integer.MAX_VALUE);
        
        dist[S]=0;
        
        ArrayList<ArrayList<int[]>> adjList=new ArrayList<>();
        for(int i=0;i<V;i++)adjList.add(new ArrayList<>());
        for(int i=0;i<adj.size();i++)
        {
            for(int j=0;j<adj.get(i).size();j++)
            {
                int v=adj.get(i).get(j).get(0);
                int w=adj.get(i).get(j).get(1);
                adjList.get(i).add(new int[]{v,w});
                adjList.get(v).add(new int[]{i,w});
            }
        }
        
        PriorityQueue<int[]> queue=new PriorityQueue<>((x,y)->x[0]-y[0]);
        queue.add(new int[]{0,S});
        
        while(!queue.isEmpty())
        {
            int []cur=queue.remove();
            for(int[] it:adjList.get(cur[1]))
            {
                if(cur[0]+it[1]<dist[it[0]])
                {
                    dist[it[0]]=it[1]+cur[0];
                    queue.add(new int[]{dist[it[0]],it[0]});
                }
            }
        }
        
        return dist;
    }
}

