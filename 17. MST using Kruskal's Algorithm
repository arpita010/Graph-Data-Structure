//{ Driver Code Starts


import java.util.*;
import java.io.*;
import java.lang.*;

public class Main{
	static BufferedReader br;
	static PrintWriter ot;
    public static void main(String args[]) throws IOException {
		br = new BufferedReader(new InputStreamReader(System.in));
		ot = new PrintWriter(System.out);
		int t = Integer.parseInt(br.readLine().trim());
		while(t-- > 0){
			String s[] = br.readLine().trim().split(" ");
			int V = Integer.parseInt(s[0]);
			int E = Integer.parseInt(s[1]);
			int edges[][] = new int[E][3];
			for(int i = 0; i < E; i++){
				s = br.readLine().trim().split(" ");
				edges[i][0] = Integer.parseInt(s[0]);
				edges[i][1] = Integer.parseInt(s[1]);
				edges[i][2] = Integer.parseInt(s[2]);
			}
			ot.println(new Solution().spanningTree(V, E, edges));
		}
		ot.close();
	}
}
// } Driver Code Ends


// User function Template for Java

class Solution{
	static int spanningTree(int V, int E, int edges[][]){
	  
	  int sum=0;
	  DisjointSet ds=new DisjointSet(V);
	  Arrays.sort(edges,(x,y)->x[2]-y[2]);
	  for(int i=0;i<E;i++)
	  {
	      int u=edges[i][0];
	      int v=edges[i][1];
	      int w=edges[i][2];
	      if(ds.findParent(u)==ds.findParent(v))continue;
	      else
	      {
	          ds.unionByRank(u,v);
	          sum+=w;
	      }
	  }
	  return sum; 
	}
}

class DisjointSet
{
    List<Integer> rank=new ArrayList<>();
    List<Integer> parent=new ArrayList<>();
    public DisjointSet(int n)
    {
        for(int i=0;i<n;i++)
        {
            rank.add(0);
            parent.add(i);
        }
    }
    public int findParent(int node)
    {
        if(node==parent.get(node))return node;
        parent.set(node,findParent(parent.get(node)));
        return parent.get(node);
    }
    
    public void unionByRank(int u,int v)
    {
        int ulp_u=findParent(u);
        int ulp_v=findParent(v);
        if(ulp_u==ulp_v)return;
        if(rank.get(ulp_u)<rank.get(ulp_v))
        {
            parent.set(ulp_u,ulp_v);
        }
        else if(rank.get(ulp_u)>rank.get(ulp_v))
        {
            parent.set(ulp_v,ulp_u);
        }
        else
        {
            parent.set(ulp_u,ulp_v);
            rank.set(ulp_v,rank.get(ulp_v)+1);
        }
    }
    
}
