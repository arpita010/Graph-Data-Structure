//{ Driver Code Starts
// Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

// Position this line where user code will be pasted.

class GFG {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while (T-- > 0) {
            int n = sc.nextInt();
            int m = sc.nextInt();
            int[][] grid = new int[n][m];

            for (int i = 0; i < n; i++) {

                for (int j = 0; j < m; j++) {
                    grid[i][j] = sc.nextInt();
                }
            }

            Solution ob = new Solution();
            int ans = ob.countDistinctIslands(grid);
            System.out.println(ans);
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution {

    int countDistinctIslands(int[][] grid) {
        // Your Code here
        
        Set<ArrayList<String>> islands=new HashSet<>();
        
        int n=grid.length;
        int m=grid[0].length;
        boolean[][] vis=new boolean[n][m];
        for(boolean[] row:vis)Arrays.fill(row,false);
        
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==1&&!vis[i][j])
                {
                    ArrayList<String> shape=new ArrayList<>();
                    bfs(i,j,vis,grid,shape);
                    islands.add(shape);
                }
            }
        }
        
        return islands.size();
        
    }
    private void bfs(int row,int col,boolean[][] vis,int[][] grid,ArrayList<String> shape)
    {
        Queue<int[]> queue=new LinkedList<>();
        queue.add(new int[]{row,col});
        vis[row][col]=true;
        int[] dr={1,0,-1,0};
        int[] dc={0,-1,0,1};
        while(!queue.isEmpty())
        {
            int[] cell=queue.remove();
            shape.add(Integer.toString(cell[0]-row)+" "+Integer.toString(cell[1]-col));
            for(int i=0;i<4;i++)
            {
                int newr=cell[0]+dr[i];
                int newc=cell[1]+dc[i];
                if(newr>=0&&newr<grid.length&&newc<grid[0].length&&newc>=0&&grid[newr][newc]==1&&!vis[newr][newc])
                {
                    vis[newr][newc]=true;
                    queue.add(new int[]{newr,newc});
                }
            }
        }
    }
}
class Pair
{
    int row,col;
    public Pair(int row,int col)
    {
        this.row=row;
        this.col=col;
    }
}
