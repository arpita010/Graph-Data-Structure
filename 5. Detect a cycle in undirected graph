import java.util.*;
public class Solution {
    
    public static String cycleDetection(int[][] edges, int n, int m) {
        // Write your code here.
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        for(int i=0;i<n+1;i++)
        {
            adj.add(new ArrayList<Integer>());
        }
        for(int i=0;i<m;i++)
        {
            adj.get(edges[i][0]).add(edges[i][1]);
            adj.get(edges[i][1]).add(edges[i][0]);
        }
        // for(int i=1;i<=n;i++)
        // System.out.println(adj.get(i));
        boolean[] vis=new boolean[n+1];
        Arrays.fill(vis,false);
        for(int i=1;i<=n;i++)
        {
            if(!vis[i])
            {
                Pair p=new Pair(i,-1);
                if(detect(p,adj,vis))return "Yes";
            }
        }
        return "No";
    }
    private static boolean detect(Pair src,ArrayList<ArrayList<Integer>> adj,boolean[] vis)
    {
        Queue<Pair> queue=new LinkedList<>();
        queue.add(src);
        vis[src.node]=true;
        while(!queue.isEmpty())
        {
            Pair p=queue.remove();
            for(int it:adj.get(p.node))
            {
                if(!vis[it])
                {
                    vis[it]=true;
                    queue.add(new Pair(it,p.node));
                }else if(p.parent!=it)
                return true;
            }
        }
        return false;
    }
        
}
class Pair
    {
        int node;
        int parent;
        public Pair(int node,int parent)
        {
            this.node=node;
            this.parent=parent;
        }
    }
