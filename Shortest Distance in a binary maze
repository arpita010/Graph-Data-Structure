//{ Driver Code Starts
// Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

// Position this line where user code will be pasted.

class GFG {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while (T-- > 0) {
            int n = sc.nextInt();
            int m = sc.nextInt();
            int[][] grid = new int[n][m];

            for (int i = 0; i < n; i++) {

                for (int j = 0; j < m; j++) {
                    grid[i][j] = sc.nextInt();
                }
            }
            int[] source = new int[2];
            for (int i = 0; i < 2; i++) {
                int x = sc.nextInt();
                source[i] = x;
            }
            int[] dest = new int[2];
            for (int i = 0; i < 2; i++) {
                int x = sc.nextInt();
                dest[i] = x;
            }
            Solution ob = new Solution();
            int ans = ob.shortestPath(grid, source, dest);
            System.out.println(ans);
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution {

    int shortestPath(int[][] grid, int[] source, int[] destination) {

        // Your code here
        if(source[0]==destination[0]&&source[1]==destination[1])return 0;
        int[] dr={0,1,0,-1};
        int[] dc={1,0,-1,0};
        int n=grid.length;
        int m=grid[0].length;
        int[][] dist=new int[n][m];
        for(int[] row:dist)Arrays.fill(row,(int)1e9);
        Queue<int[]> queue=new LinkedList<>();
        queue.add(new int[]{0,source[0],source[1]});
        dist[source[0]][source[1]]=0;
        
        while(!queue.isEmpty())
        {
            int[] cur=queue.remove();
            int row=cur[1];
            int col=cur[2];
            int steps=cur[0];
            for(int i=0;i<4;i++)
            {
                int newr=row+dr[i];
                int newc=col+dc[i];
                if(newr>=0&&newr<n&&newc>=0&&newc<m&&grid[newr][newc]==1)
                {
                    if(steps+1<dist[newr][newc])
                    {
                        dist[newr][newc]=steps+1;
                        if(newr==destination[0]&&newc==destination[1])return steps+1;
                        queue.add(new int[]{steps+1,newr,newc});
                    }
                }
            }
        }
        return -1;
    }
}
